# Host: Fedora 35
# References:
# - https://github.com/dmacvicar/terraform-provider-libvirt
# - https://www.phillipsj.net/posts/building-a-windows-server-qcow2-image/
# - https://docs.bigstack.co/docs/downloads/cloud_image

#1. Install Terraform
sudo dnf install -y dnf-plugins-core
sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
sudo dnf -y install terraform
terraform -version
terraform -install-autocomplete

#2. Create a working directory
mkdir cyberfest
cd cyberfest

#3. Download Kali Linux VMware image file and convert it to qcow2
wget -c https://kali.download/virtual-images/kali-2021.4a/kali-linux-2021.4a-vmware-amd64.7z
7za x kali-linux-2021.4a-vmware-amd64.7z
qemu-img convert -O qcow2 Kali-Linux-2021.4a-vmware-amd64.vmwarevm/Kali-Linux-2021.4a-vmware-amd64.vmdk Kali-Linux-2021.4a-amd64.qcow2
qemu-img info Kali-Linux-2021.4a-amd64.qcow2
rm -rf kali-linux-2021.4a-vmware-amd64.7z qcow2 Kali-Linux-2021.4a-vmware-amd64.vmwarevm

#4. Create main.tf file to deploy Kali Linux VM
tee main.tf <<EOF
terraform {
  required_providers {
    libvirt = {
      source  = "dmacvicar/libvirt"
      version = "~> 0.6.12"
    }
  }
}

provider "libvirt" {
  uri = "qemu:///system"
}

resource "libvirt_network" "cyberfest" {
  name      = "cyberfest"
  mode      = "nat"
  domain    = "cyberfest.ok"
  addresses = ["172.16.15.0/24"]
  autostart = "true"
  dhcp {
    enabled = true
  }
  dns {
    enabled = true
  }
}

resource "libvirt_pool" "cyberfest" {
  name = "cyberfest"
  type = "dir"
  path = "/mnt/virtual/qemu/cyberfest"
}

resource "libvirt_volume" "image-kali" {
  name   = "Kali-Linux-2021.4a-amd64.qcow2"
  pool   = libvirt_pool.cyberfest.name
  source = "./Kali-Linux-2021.4a-amd64.qcow2"
  format = "qcow2"
}

resource "libvirt_volume" "kali" {
  name             = "kali.qcow2"
  pool             = libvirt_pool.cyberfest.name
  base_volume_name = libvirt_volume.image-kali.name
  size             = 107374182400
  format           = "qcow2"
}

resource "libvirt_domain" "kali" {
  name       = "kali"
  arch       = "x86_64"
  machine    = "pc-q35-6.1"
  vcpu       = 4
  memory     = 8192
  qemu_agent = "true"
  cpu {
    mode = "host-passthrough"
  }
  video {
    type = "qxl"
  }
  network_interface {
    network_name   = libvirt_network.cyberfest.name
    hostname       = "kali"
    mac            = "52:54:00:aa:aa:aa"
    addresses      = ["172.16.15.11"]
  }
  disk {
    volume_id = libvirt_volume.kali.id
  }
}
EOF

#5. Deploy Kali Linux VM
sudo terraform init
sudo terraform plan
sudo terraform apply -auto-approve

#6. Edit main.tf file to deploy Windows Server 2019 VM
tee -a main.tf <<EOF

resource "libvirt_volume" "image-win2019" {
  name   = "17763.737.190906-2324.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us_1.qcow2"
  pool   = libvirt_pool.cyberfest.name
  source = "./17763.737.190906-2324.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us_1.qcow2"
  format = "qcow2"
}

resource "libvirt_volume" "win2019" {
  name             = "win2019.qcow2"
  pool             = libvirt_pool.cyberfest.name
  base_volume_name = libvirt_volume.image-win2019.name
  size             = 107374182400
  format           = "qcow2"
}

resource "libvirt_domain" "win2019" {
  name       = "win2019"
  arch       = "x86_64"
  machine    = "pc-q35-6.1"
  vcpu       = 4
  memory     = 8192
  qemu_agent = "true"
  cpu {
    mode = "host-passthrough"
  }
  video {
    type = "qxl"
  }
  network_interface {
    network_name   = libvirt_network.cyberfest.name
    hostname       = "win2019"
    mac            = "52:54:00:bb:bb:bb"
    addresses      = ["172.16.15.12"]
  }
  disk {
    volume_id = libvirt_volume.win2019.id
  }
}
EOF

#7. Deploy Windows Server 2019 VM
sudo terraform plan
sudo terraform apply -auto-approve

#8. Download Ubuntu 20.04 cloud image
wget -c http://cloud-images-archive.ubuntu.com/releases/focal/release-20201014/ubuntu-20.04-server-cloudimg-amd64.img -O ubuntu-20.04-server-cloudimg-amd64-20201014.img

#9. Edit main.tf file to deploy Ubuntu 20.04 VM
tee -a main.tf <<EOF

data "template_file" "user_data" {
  template = file("${path.module}/cloud_init.cfg")
}

data "template_file" "network_config" {
  template = file("${path.module}/network_config.cfg")
}

resource "libvirt_cloudinit_disk" "commoninit" {
  name           = "commoninit.iso"
  user_data      = data.template_file.user_data.rendered
  network_config = data.template_file.network_config.rendered
  pool           = libvirt_pool.cyberfest.name
}

resource "libvirt_volume" "image-ubuntu2004" {
  name   = "ubuntu-20.04-server-cloudimg-amd64-20201014.img"
  pool   = libvirt_pool.cyberfest.name
  source = "./ubuntu-20.04-server-cloudimg-amd64-20201014.img"
  format = "qcow2"
}

resource "libvirt_volume" "ubuntu2004" {
  name             = "ubuntu2004.qcow2"
  pool             = libvirt_pool.cyberfest.name
  base_volume_name = libvirt_volume.image-ubuntu2004.name
  size             = 107374182400
  format           = "qcow2"
}

resource "libvirt_domain" "ubuntu2004" {
  name       = "ubuntu2004"
  arch       = "x86_64"
  #machine    = "pc-q35-6.1"
  vcpu       = 4
  memory     = 8192
  qemu_agent = "true"
  cloudinit = libvirt_cloudinit_disk.commoninit.id
  cpu {
    mode = "host-passthrough"
  }
  video {
    type = "qxl"
  }
  network_interface {
    network_name   = libvirt_network.cyberfest.name
    hostname       = "ubuntu2004"
    mac            = "52:54:00:cc:cc:cc"
    addresses      = ["172.16.15.13"]
  }
  disk {
    volume_id = libvirt_volume.ubuntu2004.id
  }
}
EOF

#10. Create cloud_init.cfg file
mkpasswd --method=SHA-512 --rounds=4096

tee cloud_init.cfg <<EOF
#cloud-config
users:
  - name: karno
    sudo: ALL=(ALL) NOPASSWD:ALL
    passwd: $6$rounds=4096$dEN6V47uqK2ucbuB$U1FD57fz51bbFpLaKO1HEdTx9Nrz09Y8JNifHQkIwu9/Oq2vg07PYd3YxLXSBU2yWRS02HCJLZGvH7pCYPQRQ/
    lock_passwd: false
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZoIbsUfcwKXpQVXlCP+6Qf/bCs0WnJiYY8I0iuMaPX+6tMDA9mwRUj6i6gyLhyYa+AVEd1j3MbwJ2oute4Q4Y1QNPZUbC10g9ToYHUp+rCd5x3Jytn8CXztz6Z9KMG+YBy0otjuaeFOFKij0zTuUMZWXYBoKR7q9rKMkedyFMSFRMsjC5kF2oArFJgPAZRBQkWbu9uxYQD6TpGrQnZwPkSbFP1XwX2bZCy0G5XQ+iEbV+y7sS7sL5jitFKg0RKm3yuxKBCT4lyBYdvNVH009Le6IjYtY2xkOhTnADI4nSf5Mu7yU4PIEbAWA4lys84LPoHjZ5ypT3DV6Dle9bgGWZ karno@cyberfest.ok
apt:
  disable_suites: [$RELEASE-updates, $RELEASE-security, $RELEASE-backports]
runcmd:
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - sudo apt update
  - sudo apt install -y docker-ce=5:19.03.9~3-0~ubuntu-focal docker-ce-cli=5:19.03.9~3-0~ubuntu-focal containerd.io
  - sudo docker run --rm -d --name juice-shop -p 3000:3000 bkimminich/juice-shop
EOF

#11. Create network_config.cfg file
tee network_config.cfg <<EOF
network:
  version: 1
  config:
  - type: physical
    name: ens3
    subnets:
      - type: dhcp
EOF

#12. Deploy Ubuntu 20.04 VM
sudo terraform plan
sudo terraform apply -auto-approve

#13. Verify deployments

#14. Destroy all deployments and redeploy
sudo terraform destroy -auto-approve
sudo terraform apply -auto-approve